const fs = require('fs');
const path = require('path');

try {
    const jsonPath = path.resolve(__dirname, '../../utils/tabler-icons.json');
    const outputPath = path.resolve(__dirname, '../src/utils/getIconComponent.ts');
    
    const icons = JSON.parse(fs.readFileSync(jsonPath, 'utf-8'));

    if (!Array.isArray(icons) || icons.length === 0) {
        throw new Error("JSON file is empty or invalid array.");
    }

    const importList = icons.join(', ');

    const typeImports = `
import * as React from 'react';
import type { IconProps } from '@tabler/icons-react'; // FIX: Use 'type' for IconProps
import { ${importList} } from '@tabler/icons-react';
`;

    const mapProperties = icons.map(icon => `  ${icon}: ${icon}`).join(',\n');

    // **FIX: The entire template literal is now flush-left to prevent whitespace syntax errors**
    const fileContent = `
// THIS FILE IS AUTOMATICALLY GENERATED FROM ../../utils/tabler-icons.json. DO NOT EDIT MANUALLY.
${typeImports}

// Central map of ALL imported icons (Matches tabler-icons.json)
export const IconMap: { [key: string]: React.FC<IconProps> } = {
${mapProperties}
};

/**
 * Maps a string icon name (e.g., 'IconBrandGithub') to its React component.
 * @param iconName The string name of the icon from the database.
 * @returns The React component or undefined.
 */
export function getIconComponent(iconName: string): React.FC<IconProps> | undefined {
  return IconMap[iconName];
}
`;

    fs.writeFileSync(outputPath, fileContent.trim()); // Use .trim() for good measure
    console.log('✅ Icon map generated successfully from tabler-icons.json!');

} catch (error) {
    console.error('❌ ERROR generating icon map:');
    console.error(error.message);
    process.exit(1);
}